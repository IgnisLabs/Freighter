#!/usr/bin/env bash

# Image names
IMG_APP='app'
IMG_WEB='nginx'
IMG_MYSQL='mysql'
IMG_REDIS='redis'
IMG_QUEUE='beanstalkd'

# Freighter env vars defaults for docker
export F_WEB_PORT=${F_WEB_PORT:-8000}
export F_MYSQL_PORT=${F_MYSQL_PORT:-33060}
export F_REDIS_PORT=${F_MYSQL_PORT:-63790}
export F_QUEUE_PORT=${F_QUEUE_PORT:-11301}
export F_WWW_USER=${F_WWW_USER:-$UID}

COMPOSE_FILE="docker-compose.yml"
COMPOSE="docker-compose -f $COMPOSE_FILE"

# Include commands
for file in ./freighter.d/* ; do
    if [ -f "$file" ]; then
        source "$file"
    fi
done

# Get which command is supposed to run
CMD="$1"

# Requires docker env to be running
_req_running() {
    PS="$($COMPOSE ps -q 2>/dev/null)"
    if [ -z "$PS" ]; then
        echo "You must have your env up and running."
        echo "Run ./freighter <start|up> first."
        exit 1
    fi
}

# Global usage function
#   Use --no-args if you want to show help when no args are received
#   Otherwise it will only react to -h
_show_help() {
    HAS_ARGS="yes" # assume it has args
    if [ "$1" == "--no-args" ]; then
        shift 1 # gets rid of --no-args
        [[ "$#" == "0" ]] && HAS_ARGS="no"
    fi

    if [ "$HAS_ARGS" == "no" ] || [ "$1" == "-h" ]; then
        # if we have a CMD append space for display purposes
        [[ ! -z "$CMD" ]] && MYCMD="$CMD " || MYCMD=""

        echo "Usage:"
        echo "  ./freighter $MYCMD$HELP_USG"
        if [ "$HELP_TXT" ]; then
            echo ""
            echo "Description:"
            echo -e "  $HELP_TXT"
        fi

        # If we don't have a CMD, also show command list
        if [ -z "$CMD" ]; then
            echo ""
            _fcmd_list
        fi
        exit 1
    fi
}

HELP_USG="<command> [<args>]"
HELP_TXT="Ease up your docker management with Freighter!"
_show_help --no-args "$@"

if [ ! -z "$CMD" ]; then

    # source env
    if [ -f .env ]; then
        source .env
    fi

    shift 1
    FCMD="_fcmd_$CMD"
    if [ "$(type -t $FCMD)" = function ]; then
        $FCMD "$@"
    else
        echo "Command [$CMD] not found. Pass-thru to docker-compose."
        echo "Running: $COMPOSE $CMD $@"
        echo ""
        $COMPOSE "$CMD" "$@"
    fi
fi
